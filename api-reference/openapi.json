{
  "openapi": "3.0.0",
  "info": {
    "title": "Dromo API",
    "description": "The Dromo API allows you to programmatically manage schemas, imports, and data processing workflows.",
    "version": "1.0.0",
    "contact": {
      "name": "Dromo Support",
      "email": "support@dromo.io",
      "url": "https://dromo.io/contact"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://app.dromo.io/api/v1",
      "description": "Production server"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    },
    {
      "apiKeyAuth": []
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "API Key"
      },
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Dromo-License-Key"
      }
    },
    "schemas": {
      "Schema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the schema"
          },
          "name": {
            "type": "string",
            "description": "Display name of the schema"
          },
          "description": {
            "type": "string",
            "description": "Optional description of the schema"
          },
          "status": {
            "type": "string",
            "enum": ["active", "draft", "archived"],
            "description": "Current status of the schema"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 timestamp when schema was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 timestamp when schema was last updated"
          }
        }
      },
      "Field": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Unique field identifier"
          },
          "label": {
            "type": "string",
            "description": "Display label for the field"
          },
          "type": {
            "type": "string",
            "enum": ["string", "number", "email", "date", "boolean", "url"],
            "description": "Field data type"
          },
          "required": {
            "type": "boolean",
            "description": "Whether the field is required"
          },
          "validation": {
            "type": "object",
            "description": "Validation rules for the field"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error code"
              },
              "message": {
                "type": "string",
                "description": "Human-readable error message"
              },
              "details": {
                "type": "string",
                "description": "Additional error details"
              }
            }
          }
        }
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Current page number"
          },
          "limit": {
            "type": "integer",
            "description": "Number of items per page"
          },
          "total": {
            "type": "integer",
            "description": "Total number of items"
          },
          "pages": {
            "type": "integer",
            "description": "Total number of pages"
          }
        }
      }
    }
  },
  "paths": {
    "/schemas": {
      "get": {
        "summary": "List schemas",
        "description": "Retrieve a paginated list of all schemas in your account",
        "tags": ["Schemas"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of schemas to return per page",
            "schema": {
              "type": "integer",
              "default": 20,
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search schemas by name or description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by schema status",
            "schema": {
              "type": "string",
              "enum": ["active", "draft", "archived"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved schemas",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Schema"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Rate limited",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create schema",
        "description": "Create a new schema with the specified fields and configuration",
        "tags": ["Schemas"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name", "fields"],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Display name for the schema"
                  },
                  "description": {
                    "type": "string",
                    "description": "Optional description of the schema"
                  },
                  "fields": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Field"
                    },
                    "minItems": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Schema created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Schemas",
      "description": "Operations related to schema management"
    },
    {
      "name": "Imports",
      "description": "Operations related to data imports"
    },
    {
      "name": "Headless",
      "description": "Headless API operations for custom integrations"
    }
  ]
} 